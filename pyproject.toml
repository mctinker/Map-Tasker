[tool.poetry]
name = "maptasker"
version = "3.0.5"
description = "Utility to display your entire Android 'Tasker' configuration on your MAC."
authors = ["Michael Rubin <mikrubin@gmail.com>"]
readme = "README_PyPl.md"
license = "GPL-3.0-or-later"
repository = "https://github.com/mctinker/Map-Tasker"
keywords = ["tasker", "Tasker", "map tasker"]
packages = [
    { include = "maptasker"}
]
include = ["**/maptasker/**/*.py", "**/maptasker/assets/*.*"]
# How to include a data directory...
# include = ["**/maptasker/**/*.py", {path="**/clip/castles/ascii/**", format="sdist"}]
exclude = ["run_test.py", "**/maptasker/**/backup.xml", "**/maptasker/maptasker.log", "**/maptasker/MapTasker.html", "**/maptasker/.MapTasker_RunCount.txt", "**/maptasker/.arguments.txt", "**/maptasker/**/__pycache__", "**/maptasker/**/.dep-tree.yml"]

[tool.poetry.dependencies]
python = "<=3.13,>=3.11"
customtkinter = "^5.2.2"  # GUI
ctkcolorpicker = "^0.9.0"  # Color picker in GUI
pillow = "^10.2.0"  # Image support in GUI
darkdetect = "^0.8.0"  # Appearance mode detection
defusedxml = "^0.7.1"  # More secure xml parser
requests = "^2.31.0"  # HTTP Server function request
tomli_w = "^1.0.0"  # Write toml file

[tool.poetry.scripts]
maptasker = "maptasker.main:main"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/mctinker/Map-Tasker/issues"
"Change Log" = "https://github.com/mctinker/Map-Tasker/CHANGELOG.md"

[[tool.poetry.source]]
name = "testpypi"
url = "https://test.pypi.org/legacy/"
priority = "primary"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.ruff]
line-length = 120
respect-gitignore = true
select = [
    'A',    # Builtins
    'ANN',  # Annotations
    'ARG',  # Unused arguments
    'B',    # Bugbear
    'BLE',  # Blind except
    'C4',   # Comprehensions
    'C90',  # mccabe
    'COM',  # Commas
    'D1',   # Undocumented public elements
#    'D2',   # Docstring conventions
    'D3',   # Triple double quotes
#   'D4',   # Docstring text format
    'DTZ',  # Datetimes
    'EM',   # Error messages
#    'ERA',  # Commented-out code
#    'EXE',  # Executable
    'F',    # Pyflakes
    'FA',   # __future__ annotations
    'FLY',  # F-strings
    # 'FURB', # Refurb
    'G',    # Logging format
    'I',    # Isort
    'ICN',  # Import conventions
    'INP',  # Disallow PEP-420 (Implicit namespace packages)
    'INT',  # gettext
    'ISC',  # Implicit str concat
    # 'LOG',  # Logging
    'N',    # PEP-8 Naming
    'NPY',  # Numpy
    'PERF', # Unnecessary performance costs
    'PGH',  # Pygrep hooks
    'PIE',  # Unnecessary code
    'PL',   # Pylint
    'PT',   # Pytest
    # 'PTH',  # Use Pathlib
    'PYI',  # Stub files
    'Q',    # Quotes
    'RET',  # Return
    'RUF',  # Ruff
    'RSE',  # Raise
    'S',    # Bandit
    'SIM',  # Code simplification
    'SLF',  # Private member access
    'SLOT', # __slots__
    'T10',  # Debugger
    'T20',  # Print
    'TCH',  # Type checking
    'TID',  # Tidy imports
    'TRY',  # Exception handling
    'UP',   # Pyupgrade
    'W',    # Warnings
    'YTT',  # sys.version
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "build",
    "dist",
    "site-packages",
    "venv",
    "README.md",
]
ignore = [
    "PLR2004",  # Constant value comparison
    "SIM115",   # Missing "with" on oepn file
    "S606",     # No shell
    "B009",     # Do not perform function calls in argument defaults
    "T201",     # Print found
    "ANN101",   # Missing type annotation for self
    ]
show-fixes = true
src = ['src',]

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.flake8-quotes]
docstring-quotes = 'double'
multiline-quotes = 'double'

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
# https://beta.ruff.rs/docs/rules/
'__init__.py' = ['F401','F403','F405',]
'tests/*' = ['ANN', 'ARG', 'INP001', 'S101',]

[tool.ruff.pylint]
max-args = 15
max-branches = 20
max-returns = 10
max-statements = 80

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = 'all'

[tool.ruff.format]
quote-style = "double"
# indent-style = "tab"
docstring-code-format = true

[tool.black]
--line-length = 120

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = [
  "."
]

[tool.poetry.group.test.dependencies]
pytest = "^7.3.2"
pytest-mock = "*"
